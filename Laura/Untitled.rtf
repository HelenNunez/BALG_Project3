{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Consolas;
\f3\fswiss\fcharset0 Arial-BoldMT;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red19\green120\blue72;\red144\green1\blue18;\red15\green112\blue1;\red101\green76\blue29;
\red27\green29\blue31;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c50196\c0;\cssrgb\c47451\c36863\c14902;
\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 for\cf4 \strokec4  example \cf5 \strokec5 in\cf4 \strokec4  dataset.take(\cf6 \strokec6 2\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3   Title = article[\cf7 \strokec7 'title'\cf4 \strokec4 ].numpy().decode(\cf7 \strokec7 'utf-8'\cf4 \strokec4 )\cb1 \
\cb3   \cf8 \strokec8 #format pretty\cf4 \cb1 \strokec4 \
\cb3   \cf9 \strokec9 print\cf4 \strokec4 (\cf7 \strokec7 'ARTICLE BEGINS'\cf4 \strokec4 ,\cf7 \strokec7 '\\n***======***\\n'\cf4 \strokec4 )\cb1 \
\cb3   \cf9 \strokec9 print\cf4 \strokec4 (\cf7 \strokec7 '----------'\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 '\\n| Title: |'\cf4 \strokec4 , Title,\cb1 \
\cb3         \cf7 \strokec7 '\\n----------\\n'\cf4 \strokec4 )\cb1 \
/content/word2vecVersion1x1000\
\
\
\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f1\fs30 \cf10 \cb11 \strokec10 The implementation of the\'a0{\field{\*\fldinst{HYPERLINK "https://www.tensorflow.org/api_docs/python/tf/data/Dataset#cache"}}{\fldrslt 
\f2\fs26 \ul Dataset.cache()}}\'a0transformation is fairly simple: it builds up a list of the elements that pass through it as you iterate over\'a0
\f3\b completely
\f1\b0 \'a0it the first time, and it returns elements from that list on subsequent attempts to iterate over it. If the first pass only performs a\'a0
\f3\b partial
\f1\b0 \'a0pass over the data then the list is incomplete, and TensorFlow doesn't try to use the cached data, because it doesn't know whether the remaining elements will be needed, and in general it might need to reprocess all the preceding elements to compute the remaining elements.\
By modifying your program to consume the entire dataset, and iterate over it until\'a0
\f2\fs26 tf.errors.OutOfRangeError
\f1\fs30 \'a0is raised, the cache will have a complete list of the elements in the dataset, and it will be used on all subsequent iterations.\
}